AWSTemplateFormatVersion: "2010-09-09"
Description: "Cloudformation scripts to GlobalClipboard Service"

##  GlobalClipboard-dev-


Parameters:
    GlobalClipboardName:
        Type:           String
        Description:    This parameter will be used on different resources to make this setup unique
        Default:        "globalclipboard"
    
    GlobalClipboardHEXID:
        Type:           String
        Description:    Unique 8 hex ID, bucket will be "<GlobalClipboardName>-blockbucket-<GlobalClipboardHEXID>"
        Default:        "eb8dc53e"
    
    GlobalClipboardEnv:
        Type:           String
        Description:    Set env state
        Default:        "dev"
        AllowedValues: [
            "dev",
            "prod"
        ]

Metadata: 
    AWS::CloudFormation::Interface: 
        ParameterGroups: 
        - 
            Label:
                default: "GlobalClipboard Configuration"
            Parameters: 
                - GlobalClipboardName
                - GlobalClipboardEnv
                - GlobalClipboardHEXID

Resources:

##  GlobalClipboard API

    apiGateway:
        Type: "AWS::ApiGateway::RestApi"
        Properties:
            Name:               !Sub "${GlobalClipboardName}-${GlobalClipboardEnv}-API"
            Description:        "API to GlobalClipboard Service"
            ApiKeySourceType:   HEADER
            EndpointConfiguration:
                Types:
                    - "REGIONAL"

    apiGatewayPOSTMethod:
        Type: "AWS::ApiGateway::Method"
        Properties:
            ApiKeyRequired:     true
            AuthorizationType:  "NONE"
            HttpMethod:         "POST"
            ResourceId:         !GetAtt "apiGateway.RootResourceId"
            RestApiId:          !Ref "apiGateway"
            Integration:
                IntegrationHttpMethod:  "POST"
                Type:                   "AWS_PROXY"
                Uri: !Sub
                    - "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaArn}/invocations"
                    - lambdaArn: !GetAtt "GlobalClipboardBackendLambda.Arn"
    
    apiGatewayGETMethod:
        Type: "AWS::ApiGateway::Method"
        Properties:
            ApiKeyRequired:     false
            AuthorizationType:  "NONE"
            HttpMethod:         "GET"
            ResourceId:         !GetAtt "apiGateway.RootResourceId"
            RestApiId:          !Ref "apiGateway"
            Integration:
                IntegrationHttpMethod:  "POST"
                Type:                   "AWS_PROXY"
                Uri: !Sub
                    - "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaArn}/invocations"
                    - lambdaArn: !GetAtt "GlobalClipboardBackendLambda.Arn"

    apiGatewayUsagePlan:
        Type: "AWS::ApiGateway::UsagePlan"
        DependsOn:
            - "apiGateway"
        Properties:
            ApiStages:
                - ApiId: !Ref "apiGateway"
                  Stage: !Ref "apiGatewayStage"
            UsagePlanName: !Sub "${GlobalClipboardName}-${GlobalClipboardEnv}-APIUsagePlan"
   
    apiGatewayAPIKey:
        Type: "AWS::ApiGateway::ApiKey"
        Properties:
            Enabled:            true
            GenerateDistinctId: true
            Name: !Sub "${GlobalClipboardName}-${GlobalClipboardEnv}-APIKey"

    apiGatewayUsagePlanKey:
        Type: "AWS::ApiGateway::UsagePlanKey"
        DependsOn:
            - "apiGatewayPOSTMethod"
            - "apiGatewayGETMethod"
        Properties:
            UsagePlanId:    !Ref "apiGatewayUsagePlan"
            KeyId:          !Ref "apiGatewayAPIKey"
            KeyType:        "API_KEY"

    apiGatewayDeployment:
        Type: "AWS::ApiGateway::Deployment"
        DependsOn:
            - "apiGatewayPOSTMethod"
            - "apiGatewayGETMethod"
        Properties:
            RestApiId: !Ref "apiGateway"

    apiGatewayStage:
        Type: "AWS::ApiGateway::Stage"
        Properties:
            DeploymentId: !Ref "apiGatewayDeployment"
            MethodSettings:
                - ResourcePath:             /
                  HttpMethod:               POST
                  MetricsEnabled:           'true'
                  DataTraceEnabled:         'true'
                  ThrottlingBurstLimit:     '999'
                - ResourcePath:             /
                  HttpMethod:               GET
                  MetricsEnabled:           'true'
                  DataTraceEnabled:         'true'
                  ThrottlingBurstLimit:     '999'
            RestApiId: !Ref "apiGateway"
            StageName: !Sub "${GlobalClipboardName}-${GlobalClipboardEnv}-APIstage"   
    


##  GlobalClipboard Lambda Backend

    GlobalClipboardBackendLambda:
        Type: "AWS::Lambda::Function"
        Properties:
            Code:
                S3Bucket:   "download.cloudberrycode.com"
                S3Key:      !Sub "globalclipboard/Lambda/${GlobalClipboardEnv}/globalclipboard_backend.zip"
            Description:    "Backend Lambda to GlobalClipboard Service"
            FunctionName:   !Sub "${GlobalClipboardName}-${GlobalClipboardEnv}-backend"
            Environment:
                Variables:
                   BUCKET_NAME: !Sub "${GlobalClipboardName}-${GlobalClipboardEnv}-blockbucket-${GlobalClipboardHEXID}"
            Handler:        !Sub "Lambda/${GlobalClipboardEnv}/globalclipboard_backend.lambda_handler"
            MemorySize:     128
            Role:           !GetAtt "GlobalClipboardBackendLambdaIAMRole.Arn"
            Runtime:        "python3.7"
            Timeout:        10

    lambdaApiGatewayInvokePOST:
        Type: "AWS::Lambda::Permission"
        Properties:
            Action:         "lambda:InvokeFunction"
            FunctionName:   !GetAtt "GlobalClipboardBackendLambda.Arn"
            Principal:      "apigateway.amazonaws.com"
            SourceArn:      !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${apiGateway}/*/POST/"

    lambdaApiGatewayInvokeGET:
        Type: "AWS::Lambda::Permission"
        Properties:
            Action:         "lambda:InvokeFunction"
            FunctionName:   !GetAtt "GlobalClipboardBackendLambda.Arn"
            Principal:      "apigateway.amazonaws.com"
            SourceArn:      !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${apiGateway}/*/GET/"

    GlobalClipboardBackendLambdaIAMRole:
        Type: "AWS::IAM::Role"
        Properties:
            AssumeRolePolicyDocument:
                Version: "2012-10-17"
                Statement:
                    - Action:
                        - "sts:AssumeRole"
                      Effect: "Allow"
                      Principal:
                        Service:
                            - "lambda.amazonaws.com"
            Policies:
                - PolicyDocument:
                    Version: "2012-10-17"
                    Statement:
                        - Action:
                            - "logs:CreateLogGroup"
                            - "logs:CreateLogStream"
                            - "logs:PutLogEvents"
                          Effect: "Allow"
                          Resource:
                            - !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/${GlobalClipboardName}-${GlobalClipboardEnv}-backend:*"
                  PolicyName: !Sub "${GlobalClipboardName}-${GlobalClipboardEnv}-Lambda"
                - PolicyDocument:
                    Version: "2012-10-17"
                    Statement:
                        - Action:
                            - "s3:*"
                          Effect: "Allow"
                          Resource:
                            - !Sub "arn:aws:s3:::${GlobalClipboardName}-${GlobalClipboardEnv}-blockbucket-${GlobalClipboardHEXID}"
                            - !Sub "arn:aws:s3:::${GlobalClipboardName}-${GlobalClipboardEnv}-blockbucket-${GlobalClipboardHEXID}/*"
                  PolicyName: !Sub "${GlobalClipboardName}-S3"

    GlobalClipboardBackendLambdaLogGroup:
        Type: "AWS::Logs::LogGroup"
        Properties:
            LogGroupName: !Sub "/aws/lambda/${GlobalClipboardName}-${GlobalClipboardEnv}-backend"
            RetentionInDays: 30

##  GlobalClipboard S3 blocks

    S3bucket:
        Type: "AWS::S3::Bucket"
        Properties:
            BucketName: !Sub "${GlobalClipboardName}-${GlobalClipboardEnv}-blockbucket-${GlobalClipboardHEXID}"
            LifecycleConfiguration:
                Rules:
                    - Id: DeleteBlockAfter7Days
                      Status: "Enabled"
                      ExpirationInDays: 7
                      NoncurrentVersionExpirationInDays: 7

##  GlobalClipboard Lambda Updater

    GlobalClipboardUpdaterLambda:
        Type: "AWS::Lambda::Function"
        Properties:
            Code:
                S3Bucket:   "download.cloudberrycode.com"
                S3Key:      !Sub "globalclipboard/Lambda/${GlobalClipboardEnv}/globalclipboard_updater.zip"
            Description:    "Backend Lambda to GlobalClipboard Service"
            FunctionName:   !Sub "${GlobalClipboardName}-${GlobalClipboardEnv}-updater"
            Environment:
                Variables:
                    BUCKET_NAME:        'download.cloudberrycode.com'
                    BUCKET_KEY:         'globalclipboard/Lambda/${GlobalClipboardEnv}/globalclipboard_backend.zip'
                    LAMBDA_FUNCTION:    !Ref GlobalClipboardBackendLambda
            Handler:        "Lambda/${GlobalClipboardEnv}/globalclipboard_updater.lambda_handler"
            MemorySize:     128
            Role:           !GetAtt "GlobalClipboardUpdaterLambdaIAMRole.Arn"
            Runtime:        "python3.7"
            Timeout:        10

    GlobalClipboardUpdaterLambdaIAMRole:
        Type: "AWS::IAM::Role"
        Properties:
            AssumeRolePolicyDocument:
                Version: "2012-10-17"
                Statement:
                    - Action:
                        - "sts:AssumeRole"
                      Effect: "Allow"
                      Principal:
                        Service:
                            - "lambda.amazonaws.com"
            Policies:
                - PolicyDocument:
                    Version: "2012-10-17"
                    Statement:
                        - Action:
                            - "logs:CreateLogGroup"
                            - "logs:CreateLogStream"
                            - "logs:PutLogEvents"
                          Effect: "Allow"
                          Resource:
                            - !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/${GlobalClipboardName}-${GlobalClipboardEnv}-updater:*"
                  PolicyName: !Sub "${GlobalClipboardName}-${GlobalClipboardEnv}-LogUpdater"
                - PolicyDocument:
                    Version: "2012-10-17"
                    Statement:
                        - Action:
                            - "lambda:UpdateFunctionCode"
                          Effect: "Allow"
                          Resource:
                            - !Sub "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${GlobalClipboardName}-${GlobalClipboardEnv}-updater"
                  PolicyName: !Sub "${GlobalClipboardName}-${GlobalClipboardEnv}-updater"

    GlobalClipboardUpdaterLambdaLogGroup:
        Type: "AWS::Logs::LogGroup"
        Properties:
            LogGroupName: !Sub "/aws/lambda/${GlobalClipboardName}-${GlobalClipboardEnv}-updater"
            RetentionInDays: 30